
E:\code\nodejsPrj>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help json` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg> --save` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
name: (nodejsPrj)
Sorry, name can no longer contain capital letters.
name: (nodejsPrj)
Sorry, name can no longer contain capital letters.
name: (nodejsPrj) helloworld
version: (1.0.0)
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to E:\code\nodejsPrj\package.json:

{
  "name": "helloworld",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC"
}


Is this ok? (yes)

E:\code\nodejsPrj>npm install --save koa
helloworld@1.0.0 E:\code\nodejsPrj
`-- koa@2.10.0
  +-- accepts@1.3.7
  | +-- mime-types@2.1.24
  | | `-- mime-db@1.40.0
  | `-- negotiator@0.6.2
  +-- cache-content-type@1.0.1
  | `-- ylru@1.2.1
  +-- content-disposition@0.5.3
  | `-- safe-buffer@5.1.2
  +-- content-type@1.0.4
  +-- cookies@0.8.0
  | +-- depd@2.0.0
  | `-- keygrip@1.1.0
  |   `-- tsscmp@1.0.6
  +-- debug@3.1.0
  | `-- ms@2.0.0
  +-- delegates@1.0.0
  +-- depd@1.1.2
  +-- destroy@1.0.4
  +-- encodeurl@1.0.2
  +-- error-inject@1.0.0
  +-- escape-html@1.0.3
  +-- fresh@0.5.2
  +-- http-assert@1.4.1
  | `-- deep-equal@1.0.1
  +-- http-errors@1.7.3
  | +-- inherits@2.0.4
  | +-- setprototypeof@1.1.1
  | `-- toidentifier@1.0.0
  +-- is-generator-function@1.0.7
  +-- koa-compose@4.1.0
  +-- koa-convert@1.2.0
  | +-- co@4.6.0
  | `-- koa-compose@3.2.1
  |   `-- any-promise@1.3.0
  +-- koa-is-json@1.0.0
  +-- on-finished@2.3.0
  | `-- ee-first@1.1.1
  +-- only@0.0.2
  +-- parseurl@1.3.3
  +-- statuses@1.5.0
  +-- type-is@1.6.18
  | `-- media-typer@0.3.0
  `-- vary@1.1.2

npm WARN helloworld@1.0.0 No description
npm WARN helloworld@1.0.0 No repository field.

E:\code\nodejsPrj>node index.js
E:\code\nodejsPrj\index.js:8
app.use(async (ctx, next) => {
              ^

SyntaxError: Unexpected token (
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:389:7)
    at startup (bootstrap_node.js:149:9)

E:\code\nodejsPrj>node index.js
E:\code\nodejsPrj\index.js:4
app.use(ctx, next) => {
   ^

SyntaxError: Unexpected token .
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:389:7)
    at startup (bootstrap_node.js:149:9)

E:\code\nodejsPrj>node index.js
E:\code\nodejsPrj\index.js:4
app.use(async (ctx, next) => {
              ^

SyntaxError: Unexpected token (
    at createScript (vm.js:56:10)
    at Object.runInThisContext (vm.js:97:10)
    at Module._compile (module.js:542:28)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)
    at Module.runMain (module.js:604:10)
    at run (bootstrap_node.js:389:7)
    at startup (bootstrap_node.js:149:9)

E:\code\nodejsPrj>node index.js
app started at port 3000...
^C
E:\code\nodejsPrj>npm run serve

> helloworld@1.0.0 serve E:\code\nodejsPrj
> node index.js

app started at port 3000...
